# -*- coding: utf-8 -*-
"""Real_Individual_Knowledge_Map_Weekly_1.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v1KuS0b5oB72rHsvCNGFMWw3dSlEo_kj
"""

import pandas as pd
from pyvis.network import Network

keyword_category = pd.read_excel("assets/dictionary 2.0.xlsx",index_col=0).iloc[:,0:1]

print(keyword_category)

# read student files

file_names_2021 = ['Y2021_Student01','Y2021_Student02','Y2021_Student03','Y2021_Student04','Y2021_Student05','Y2021_Student06','Y2021_Student07']
year2021_df = []
for i in range(len(file_names_2021)):
    temp_df = pd.read_csv("assets/Year2021/"+file_names_2021[i]+".csv",index_col=0)
    year2021_df.append(temp_df)

file_names_2022 = ['Y2022_Student01','Y2022_Student02','Y2022_Student03','Y2022_Student04','Y2022_Student05','Y2022_Student06','Y2022_Student07','Y2022_Student08','Y2022_Student09','Y2022_Student10','Y2022_Student11','Y2022_Student12']
year2022_df = []
for i in range(len(file_names_2022)):
    temp_df = pd.read_csv("assets/Year2022/"+file_names_2022[i]+".csv",index_col=0)
    year2022_df.append(temp_df)

file_names_2023 = ['Y2023_Student01','Y2023_Student02','Y2023_Student03','Y2023_Student04','Y2023_Student05','Y2023_Student06','Y2023_Student07','Y2023_Student08','Y2023_Student09','Y2023_Student10','Y2023_Student11','Y2023_Student12']
year2023_df = []
for i in range(len(file_names_2023)):
    temp_df = pd.read_csv("assets/Year2023/"+file_names_2023[i]+".csv",index_col=0)
    year2023_df.append(temp_df)

keywords = list(year2021_df[0].head())
print(keywords)

# the number shows which category the keyword belongs to
keywords_group = keyword_category.iloc[:, 0].to_numpy()
print(keywords_group)

# create color for each category
category_color = []
for i in keywords_group:
    if i == 1:
        category_color.append('#e3342f')
    if i == 2:
        category_color.append('#f6993f')
    if i == 3:
        category_color.append('#ffed4a')
    if i == 4:
        category_color.append('#38c172')
    if i == 5:
        category_color.append('#4dc0b5')
    if i == 6:
        category_color.append('#3490dc')
    if i == 7:
        category_color.append('#6574cd')
    if i == 8:
        category_color.append('#9561e2')
    if i == 9:
        category_color.append('#f66d9b')

# create a function that produces weekly individual knowledge map for each student
def weekly_individual_knowledge_map(student_df):
    # extract each week's keyword list
    week_list = []
    for i in range(student_df.shape[0]):
        week_list.append(student_df.iloc[i].to_numpy())

    nets = []
    for i in range(student_df.shape[0]):
        net = Network(notebook=True)#, heading="Individual Knowledge Map Weekly " + str((i + 1)))
        for j, value in enumerate(week_list[i]):
            if value == 1:
                net.add_node(j, label=keywords[j], size=6, title='Week'+str(i+1),color=category_color[j])
                
        net_id = [dic['id'] for dic in net.nodes]

        for n in net_id:
            for j in net_id:
                if n != j and keywords_group[n] == keywords_group[j]:
                    net.add_edge(n,j)
        net.repulsion(central_gravity=1,spring_length=30)
        nets.append(net)
    
    return nets

indi_weekly_s1_2021 = weekly_individual_knowledge_map(year2021_df[0])
indi_weekly_s2_2021 = weekly_individual_knowledge_map(year2021_df[1])
indi_weekly_s3_2021 = weekly_individual_knowledge_map(year2021_df[2])
indi_weekly_s4_2021 = weekly_individual_knowledge_map(year2021_df[3])
indi_weekly_s5_2021 = weekly_individual_knowledge_map(year2021_df[4])
indi_weekly_s6_2021 = weekly_individual_knowledge_map(year2021_df[5])
indi_weekly_s7_2021 = weekly_individual_knowledge_map(year2021_df[6])

indi_weekly_s1_2022 = weekly_individual_knowledge_map(year2022_df[0])
indi_weekly_s2_2022 = weekly_individual_knowledge_map(year2022_df[1])
indi_weekly_s3_2022 = weekly_individual_knowledge_map(year2022_df[2])
indi_weekly_s4_2022 = weekly_individual_knowledge_map(year2022_df[3])
indi_weekly_s5_2022 = weekly_individual_knowledge_map(year2022_df[4])
indi_weekly_s6_2022 = weekly_individual_knowledge_map(year2022_df[5])
indi_weekly_s7_2022 = weekly_individual_knowledge_map(year2022_df[6])
indi_weekly_s8_2022 = weekly_individual_knowledge_map(year2022_df[7])
indi_weekly_s9_2022 = weekly_individual_knowledge_map(year2022_df[8])
indi_weekly_s10_2022 = weekly_individual_knowledge_map(year2022_df[9])
indi_weekly_s11_2022 = weekly_individual_knowledge_map(year2022_df[10])
indi_weekly_s12_2022 = weekly_individual_knowledge_map(year2022_df[11])

indi_weekly_s1_2023 = weekly_individual_knowledge_map(year2023_df[0])
indi_weekly_s2_2023 = weekly_individual_knowledge_map(year2023_df[1])
indi_weekly_s3_2023 = weekly_individual_knowledge_map(year2023_df[2])
indi_weekly_s4_2023 = weekly_individual_knowledge_map(year2023_df[3])
indi_weekly_s5_2023 = weekly_individual_knowledge_map(year2023_df[4])
indi_weekly_s6_2023 = weekly_individual_knowledge_map(year2023_df[5])
indi_weekly_s7_2023 = weekly_individual_knowledge_map(year2023_df[6])
indi_weekly_s8_2023 = weekly_individual_knowledge_map(year2023_df[7])
indi_weekly_s9_2023 = weekly_individual_knowledge_map(year2023_df[8])
indi_weekly_s10_2023 = weekly_individual_knowledge_map(year2023_df[9])
indi_weekly_s11_2023 = weekly_individual_knowledge_map(year2023_df[10])
indi_weekly_s12_2023 = weekly_individual_knowledge_map(year2023_df[11])

indi_weekly_s12_2023[0].show('assets/2023_s12_weekly_1.html')

indi_weekly_s12_2023[1].show('assets/2023_s12_weekly_2.html')

indi_weekly_s12_2023[2].show('assets/2023_s12_weekly_3.html')

indi_weekly_s12_2023[3].show('assets/2023_s12_weekly_4.html')

indi_weekly_s12_2023[4].show('assets/2023_s12_weekly_5.html')

years = [2021, 2022, 2023]
for year in years:
    year_df = f"year{year}_df"
    palette = f"palette_{year}"
    if year == 2021:
        for week in range(1, 9):
            week_df = year_df[week - 1]
            indi_weekly = weekly_individual_knowledge_map(week_df, palette)
            for j in range(1,8):
            indi_weekly[j].show(f"assets/{year}_s{j}_weekly_{week}.html")
    elif year == 2022:
        for week in range(1, 11):
            week_df = year_df[week - 1]
            indi_weekly = weekly_individual_knowledge_map(week_df, palette)
            for j in range(1, 13):
                indi_weekly[j].show(f"assets/{year}_s{j}_weekly_{week}.html")
    elif year == 2023:
        for week in range(1, 6):
            week_df = year_df[week - 1]
            indi_weekly = weekly_individual_knowledge_map(week_df, palette)
            for j in range(1, 13):
                indi_weekly[j].show(f"assets/{year}_s{j}_weekly_{week}.html")



sidebar = html.Div(
    [
        dbc.Row(
            [html.H5('Individual knowledge map',
                        style={'margin-top': '12px', 'margin-left': '14px'})],
            style={"height": "5vh"},
            className='bg-light text-white'
        ),
        dbc.Row(
            [html.Div([html.Hr(),html.P('Select a year first',
                                 style={'margin-top': '8px', 'margin-bottom': '4px'},
                                 className='text-black'),
                          dcc.Dropdown(id='yeardropdown', options=[{'label': '2021', 'value': '2021'},
                                                                    {'label': '2022', 'value': '2022'},
                                                                    {'label': '2023', 'value': '2023'}],
                                       multi=False,
                                       style={'width': '220px', 'color': '#000000'}
                                       ),

                          html.P('Find your name to see your individual weekly keywords',
                                 style={'margin-top': '8px', 'margin-bottom': '4px'},
                                 className='text-black'),
                          dcc.Dropdown(id='mydropdown',
                                       multi=False,
                                       style={'width': '220px', 'color': '#000000'}
                                       ),
html.Hr(),

dbc.Card([
    dbc.CardHeader("Keywords Categories", className="bg-primary text-white text-center"),
    dbc.Row([
        dbc.Col([
            dbc.ListGroup([
                html.Li(category.capitalize(),
                        className="list-group-item",
                        style={"list-style-type": "none", "background-color": category_colors[category], "font-size": "14px"})
                for category in list(category_colors)[:4]
            ], flush=True, className="border-0 shadow-sm list-group-flush")
        ], md=6.5),
        dbc.Col([
            dbc.ListGroup([
                html.Li(category.capitalize(),
                        className="list-group-item",
                        style={"list-style-type": "none", "background-color": category_colors[category], "font-size": "14px"})
                for category in list(category_colors)[4:]
            ], flush=True, className="border-0 shadow-sm list-group-flush")
        ], md=6.5),
    ],justify="around")
], className="border-0 shadow-sm mb-4", style={"background-color": "#F0F0F0"}),


                        html.Hr() ],
                      className='p-4')],
            # Add padding to the div
            style={'height': '73vh', 'margin': '10px', 'display': 'flex'},
            className='bg-white rounded shadow-sm mb-3' # Add a white background, rounded corners, and shadow
        ),



        html.Hr(style={ 'margin': '30px 0'}),
        dbc.Row(
            [html.H5('Collective knowledge map',style={'margin-top': '12px', 'margin-left': '14px'})],
            style={"height": "5vh"},
            className='bg-light text-white'
        ),
        dbc.Row(
            [html.Div([html.Hr(),html.P('Select a year first',
                                 style={'margin-top': '8px', 'margin-bottom': '4px'},
                                 className='text-black'),
                          dcc.Dropdown(id='yeardropdown1', options=[{'label': '2021', 'value': '2021'},
                                                                    {'label': '2022', 'value': '2022'},
                                                                    {'label': '2023', 'value': '2023'}],
                                       multi=False,
                                       style={'width': '220px', 'color': '#000000'}),
html.Hr()
                       ],
                          className='p-4') # Add padding to the div
            ],
            style={'height': '110vh', 'margin': '10px', 'display': 'flex'},
            className='bg-white rounded shadow-sm' #  white background, rounded corners, and shadow
        ),
        html.Hr(style={ 'margin': '20px 0'}),
    ],
    style={'padding-top': '20px', 'padding-bottom': '20px', 'background-color': '#f8f9fa'} # adding and background color to the sidebar
)



html_graphs = html.Div(
    [
        dbc.Container(
            [dbc.Row(
                [
                    dbc.Col(
                        [
html.Div(
    [
        html.P(
            'Individual Key Concepts (weekly)',
            className='fs-5 text-center font-weight-bold',
            style={"font-size": "2.5rem", "font-weight": "bold", "margin-right": "-40px", "flex": "1"}
        ),
        html.Button(
            'i',
            id='info-button',
            className='badge rounded-pill bg-primary',
            style={ 'font-size': '0.95rem',"margin-left": "10px"}
        ),
    ],
    className='d-flex align-items-center',
    style={'display': 'flex'}
),
dbc.Modal(
    [
        dbc.ModalHeader("Information about Individual Weekly Map"),
        dbc.ModalBody(
            [
                html.Ul(
                    [
                        html.Li("Knowledge keywords mentioned in reflection for a particular week.", style={'color': 'darkgrey'}),
                        html.Li("Each node represents a knowledge keyword with name underneath", style={'color': 'darkgrey'}),
                        html.Li("Color corresponds to the specific knowledge category", style={'color': 'darkgrey'}),
                    ]
                ),
                #html.Br(),
                html.P("  What can I do with the weekly knowledge map?"),
                html.P("    1.  Identify the specific concepts that you have applied during the week.",style={'color': 'darkgrey'}),
                html.P("    2.  By reviewing the nodes and categories on the map, you can reflect on the knowledge areas that you have engaged with and assess your level of understanding and application.", style={'color': 'darkgrey'})
            ]
        ),
        dbc.ModalFooter(html.Button('Close', id='close-button', className='btn btn-secondary'))
    ],
    id="info-modal",
    centered=True
),
                            #html.Button('i', id='info-button', className='badge rounded-pill bg-primary', style={'vertical-align': 'top'}),
                            html.P('Identify which concepts I’ve applied this week',
                             className='fs-6 text-center',
                        style={"font-size": "1.0rem"}),
                            html.Iframe(id='html-iframe', srcDoc=initial_html, width='100%', height='1400',
                                        style={'height': '60vh'}),

                            dbc.Row([dbc.Col([html.Div([
                                # html.Label('Select a week:', style={'fontSize': '20px'}),
                                dcc.Slider(
                                    id='myslider',
                                    min=1,
                                    max=10,
                                    value=1,
                                    step=1,
                                    updatemode='drag',
                                    marks={1: {'label': '1'}, 2: {'label': '2'}, 3: '3', 4: '4', 5: '5', 6: '6', 7: '7',
                                           8: '8', 9: '9', 10: '10'},
                                    tooltip={"placement": "bottom", "always_visible": True}, included=False
                                ),
                                #dbc.Button("Click me!", id="button-1", color="primary", className="ml-2"),
                                dbc.Label("Week", className="text-center w-100 mb-0", width='10%'),
                            ], style={'width': '85%', 'margin': '20px', 'margin-top': '20px',
                                      'color': '#000000',
                                      'fontSize': '15px',
                                      'padding': '5px'})
                            ])]),

                        ], width={"size": 5}),

                    dbc.Col(
                        [


#, style={'width': '95%', 'margin': '30px', 'margin-top': '20px','color': '#000000','fontSize': '15px','padding': '5px'}
html.Div(
    [
        html.P(
            'Individual Key Concepts (aggregated)',
            className='fs-5 text-center font-weight-bold',
            style={"font-size": "2.5rem", "font-weight": "bold", "margin-right": "-40px", "flex": "1"}
        ),
        html.Button(
            'i',
            id='info-button2',
            className='badge rounded-pill bg-primary',
            style={ 'font-size': '0.95rem',"margin-left": "10px"}
        ),
    ],
    className='d-flex align-items-center',
    style={'display': 'flex'}
),



dbc.Modal(
    [
        dbc.ModalHeader("Information about Individual Aggregate Map"),
        dbc.ModalBody(
            [
                html.Ul(
                    [
                        html.Li("Knowledge keywords mentioned in reflections up to a certain week", style={'color': 'darkgrey'}),
                        html.Li("The color of the node corresponds to a specific knowledge category", style={'color': 'darkgrey'}),
                        html.Li("Within the same category, darker shades indicate their earlier occurrence", style={'color': 'darkgrey'}),
                        html.Li("Clicking on a node reveals the week in which the keyword was first mentioned", style={'color': 'darkgrey'}),
                        html.Li("Size of the node reflects the frequency of its occurrence", style={'color': 'darkgrey'}),
                    ]
                ),
                #html.Br(),
                html.P("  What can I do with the aggregate knowledge map?"),
                html.P("    1.  You can visualize your personal learning journey by identifying which concepts you have applied and how frequently you have engaged with them over time.",style={'color': 'darkgrey'}),
                html.P("    2.  It can help you identify patterns in your learning and identify topics that you may want to explore further.", style={'color': 'darkgrey'})
            ]
        ),
        dbc.ModalFooter(html.Button('Close', id='close-button2', className='btn btn-secondary'))
    ],
    id="info-modal2",
    centered=True
),
                            html.P('Examine how my knowledge concepts evolve over time',
                                   className='fs-6 text-center',
                                   style={"font-size": "1.0rem"}),
                            html.Iframe(id='html-iframe-2', srcDoc=initial_html_aggregate, width='110%', height='600',
                                        style={'height': '60vh'}),

                            dbc.Row([dbc.Col([html.Div([
                                # html.Label('Select a week:', style={'fontSize': '20px'}),
                                dcc.Slider(
                                    id='myslider2',
                                    min=1,
                                    max=10,
                                    value=1,
                                    step=1,
                                    updatemode='drag',
                                    marks={1: {'label': '1'}, 2: {'label': '2'}, 3: '3', 4: '4', 5: '5', 6: '6', 7: '7',
                                           8: '8', 9: '9', 10: '10'},
                                    tooltip={"placement": "bottom", "always_visible": True}, included=False
                                ),
                                dbc.Label("Week", className="text-center w-100 mb-0", width='10%'),

dbc.Container(
    [
dbc.Row(
    [
        dbc.Col(),
        dbc.Col(
            dbc.Button(
                html.Span(
                    [html.I(className="bi bi-play"), html.Span(" Play", className="ms-2")],
                    className="d-flex align-items-center"
                ),
                id="button-1",
                color="primary",
                className="btn-lg px-4 py-2  border-0",
                style={
                    "font-size": "16px",
                    "font-weight": "bold",
                    "letter-spacing": "1px",
                    "text-transform": "uppercase",
                    "box-shadow": "none",
                    "background-color": "#F8F9FA",
                    "color": "#212529"
                }
            ),

            width="auto",
            style={"display": "flex", "justify-content": "center"},
        ),
        dbc.Col(),
    ],
    className="mb-3",
)
        ,
dbc.Modal(
    [
        dbc.ModalHeader("Animated GIF"),
        dbc.ModalBody(
            html.Img(id="gif-player", src="")
        ),
        dbc.ModalFooter(
            dbc.Button("Close", id="close-button3", className="ml-auto")
        )
    ],
    id="gif-modal",
    centered=True,
    size="lg",
    style={"max-width": "200%", "max-height": "200vh"}
),
    ]
)


                            ], style={'width': '85%', 'margin': '20px', 'margin-top': '20px',
                                      'color': '#000000',
                                      'fontSize': '15px',
                                      'padding': '5px'})
                            ])]),

                        ], width={"size": 5}),
                    #dbc.Col(
                        #[
                           # html.Div(
                                #html.P('Collective Knowledge in the Class (weekly)',
                                       #className='text-nowrap bd-highlight',
                                       #style={'fontWeight': 'bold'}),

                               # className='d-flex justify-content-end',
                               # style={'text-align': 'right', 'margin-right': '-70px'}
                            #),

dbc.Col(
                        [  html.Div(
    [
        html.P(
            'Collective Knowledge in the Class (weekly)',
            className='text-nowrap bd-highlight',
            style={
                'fontWeight': 'bold',
                'padding-right': '10px',
                'padding-left': '10px',
                'display': 'inline-block',
                'margin': '0'
            }
        ),
        html.Button(
            'i',
            id='info-button4',
            className='badge rounded-pill bg-primary',
            style={
                'vertical-align': 'middle',
                'font-size': '0.95rem',
                'display': 'inline-block',
                'margin': '0'
            }
        ),
    ],
    className='d-flex justify-content-end align-items-center',
    style={'text-align': 'right', 'margin-right': '-90px'}
),




dbc.Modal(
    [
        dbc.ModalHeader("Information about Class Collective Map"),
        dbc.ModalBody(
            [
                html.Ul(
                    [
                        html.Li("All knowledge keywords mentioned by all students in a class in their reflections for a particular week", style={'color': 'darkgrey'}),
                        html.Li("The color of the node corresponds to a specific knowledge category ", style={'color': 'darkgrey'}),
                        html.Li("Clicking on a node reveals the names of the students who mentioned the keyword", style={'color': 'darkgrey'}),
                        html.Li("Size of the node reflects the number of students who mentioned it", style={'color': 'darkgrey'}),

                    ]
                ),
                #html.Br(),
                html.P("  What can I do with the Class Collective Map?"),
                html.P("    1.  You can see what concepts your classmates have applied.",style={'color': 'darkgrey'}),
                html.P("    2.  It can serve as a resource for collaboration, discussion, and peer learning.", style={'color': 'darkgrey'})
            ]
        ),
        dbc.ModalFooter(html.Button('Close', id='close-button4', className='btn btn-secondary'))
    ],
    id="info-modal4",
    centered=True
),

html.Div(
                                html.P('See what concepts other students have applied',
                                       className='text-nowrap bd-highlight',
                                       style={'fontWeight': 'bold'}),

                                className='fs-6 d-flex justify-content-end',
                                style={'text-align': 'right', 'margin-right': '-50px'}
                            ),
                            html.Iframe(id='html-iframe-4', srcDoc=initial_html_aggregate, width='170%', height='800',
                                        style={'height': '75vh'}),

                            dbc.Row([dbc.Col([html.Div([
                                # html.Label('Select a week:', style={'fontSize': '20px'}),
                                dcc.Slider(
                                    id='myslider3',
                                    min=1,
                                    max=10,
                                    value=1,
                                    step=1,
                                    updatemode='drag',
                                    marks={1: {'label': '1'}, 2: {'label': '2'}, 3: '3', 4: '4', 5: '5', 6: '6', 7: '7',
                                           8: '8', 9: '9', 10: '10'},
                                    tooltip={"placement": "bottom", "always_visible": True}, included=False
                                ),
                                dbc.Label("Week", className="text-center w-100 mb-0", width='10%'),
                            ], style={'width': '160%', 'margin': '20px', 'margin-top': '20px',
                                      # 'color': '#000000',
                                      'fontSize': '15px',
                                      'padding': '5px'})
                            ])]),

                        ], width={"size": 6}),

                ], style={"height": "100vh"}
            )

            ],
            fluid=True
        )
    ])
# Define the App Layout
page_1_layout = html.Div(
    [
        dbc.Container(
            [
                html.Hr(),
                dbc.Row(
                    [
                        dbc.Col(
                            sidebar,
                            width=3,
                            className='bg-dark p-4',
                            style={'border-radius': '20px', 'box-shadow': '4px 4px 8px 0 rgba(0,0,0,0.2)'}
                        ),
dbc.Col(
    html_graphs,
    className='p-4',
    style={'border-radius': '30px', 'box-shadow': '4px 4px 8px 0 rgba(0,0,0,0.2)', 'margin-right': '-130px'}
),
                    ],
                    className='mt-4'
                )
            ],
            fluid=True,
            className='p-4'
        )
    ],
    style={'background': '#f8f9fa'}
)