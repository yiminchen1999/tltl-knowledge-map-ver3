# -*- coding: utf-8 -*-
"""Real_Individual_Knowledge_Map_Weekly_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ku6av5Dh8_BBlGk8Yri79CrZLXSq2dPR
"""

from pyvis.network import Network
import pandas as pd
import numpy as np

# read student files

file_names_2021 = ['Y2021_Student_01','Y2021_Student_02','Y2021_Student_03','Y2021_Student_04','Y2021_Student_05','Y2021_Student_06','Y2021_Student_07']
year2021_df = []
for i in range(len(file_names_2021)):
    temp_df = pd.read_csv("assets/Y2021/"+file_names_2021[i]+".csv",index_col=0)
    year2021_df.append(temp_df)

file_names_2022 = ['Y2022_Student_01','Y2022_Student_02','Y2022_Student_03','Y2022_Student_04','Y2022_Student_05','Y2022_Student_06','Y2022_Student_07','Y2022_Student_08','Y2022_Student_09','Y2022_Student_10','Y2022_Student_11','Y2022_Student_12']
year2022_df = []
for i in range(len(file_names_2022)):
    temp_df = pd.read_csv("assets/Y2022/"+file_names_2022[i]+".csv",index_col=0)
    year2022_df.append(temp_df)

file_names_2023 = ['Y2023_Student_01','Y2023_Student_02','Y2023_Student_03','Y2023_Student_04','Y2023_Student_05','Y2023_Student_06','Y2023_Student_07','Y2023_Student_08','Y2023_Student_09','Y2023_Student_10','Y2023_Student_11','Y2023_Student_12']
year2023_df = []
for i in range(len(file_names_2023)):
    temp_df = pd.read_csv("assets/Y2023/"+file_names_2023[i]+".csv",index_col=0)
    year2023_df.append(temp_df)

keywords = pd.read_csv("dictionary 5.0 (final with subcategory).csv")["display concept"].tolist()

# the number shows which category the keyword belongs to
keywords_group = pd.read_csv("dictionary 5.0 (final with subcategory).csv")["category"].to_numpy()

categories = {
    1: "dig fab",
    2: "electronic",
    3: "math/physics",
    4: "programming",
    5: "think/design",
    6: "mechanics",
    7: "recycle",
    8: "materials",
    9: "hand tools"
}

# create color for each category
category_color = []
for i in keywords_group:
    if i == 1:
        category_color.append('#e3342f')
    if i == 2:
        category_color.append('#f6993f')
    if i == 3:
        category_color.append('#ffed4a')
    if i == 4:
        category_color.append('#38c172')
    if i == 5:
        category_color.append('#4dc0b5')
    if i == 6:
        category_color.append('#3490dc')
    if i == 7:
        category_color.append('#6574cd')
    if i == 8:
        category_color.append('#9561e2')
    if i == 9:
        category_color.append('#f66d9b')

# create a function that produces weekly individual knowledge map for each student
def weekly_individual_knowledge_map(student_df):
    # extract each week's keyword list
    week_list = []
    for i in range(student_df.shape[0]):
        week_list.append(student_df.iloc[i].to_numpy())

    nets = []
    for i in range(student_df.shape[0]):
        net = Network(notebook=True)
        for j, value in enumerate(week_list[i]):
            if value == 1:
                net.add_node(j, label=keywords[j], size=6, title=categories[keywords_group[j]],color=category_color[j])
                
        net_id = [dic['id'] for dic in net.nodes]

        for n in net_id:
            for j in net_id:
                if n != j and keywords_group[n] == keywords_group[j]:
                    net.add_edge(n,j)
        net.repulsion(central_gravity=1,spring_length=30)
        nets.append(net)
    
    return nets

indi_weekly_s1_2021 = weekly_individual_knowledge_map(year2021_df[0])
indi_weekly_s2_2021 = weekly_individual_knowledge_map(year2021_df[1])
indi_weekly_s3_2021 = weekly_individual_knowledge_map(year2021_df[2])
indi_weekly_s4_2021 = weekly_individual_knowledge_map(year2021_df[3])
indi_weekly_s5_2021 = weekly_individual_knowledge_map(year2021_df[4])
indi_weekly_s6_2021 = weekly_individual_knowledge_map(year2021_df[5])
indi_weekly_s7_2021 = weekly_individual_knowledge_map(year2021_df[6])

indi_weekly_s1_2022 = weekly_individual_knowledge_map(year2022_df[0])
indi_weekly_s2_2022 = weekly_individual_knowledge_map(year2022_df[1])
indi_weekly_s3_2022 = weekly_individual_knowledge_map(year2022_df[2])
indi_weekly_s4_2022 = weekly_individual_knowledge_map(year2022_df[3])
indi_weekly_s5_2022 = weekly_individual_knowledge_map(year2022_df[4])
indi_weekly_s6_2022 = weekly_individual_knowledge_map(year2022_df[5])
indi_weekly_s7_2022 = weekly_individual_knowledge_map(year2022_df[6])
indi_weekly_s8_2022 = weekly_individual_knowledge_map(year2022_df[7])
indi_weekly_s9_2022 = weekly_individual_knowledge_map(year2022_df[8])
indi_weekly_s10_2022 = weekly_individual_knowledge_map(year2022_df[9])
indi_weekly_s11_2022 = weekly_individual_knowledge_map(year2022_df[10])
indi_weekly_s12_2022 = weekly_individual_knowledge_map(year2022_df[11])

indi_weekly_s1_2023 = weekly_individual_knowledge_map(year2023_df[0])
indi_weekly_s2_2023 = weekly_individual_knowledge_map(year2023_df[1])
indi_weekly_s3_2023 = weekly_individual_knowledge_map(year2023_df[2])
indi_weekly_s4_2023 = weekly_individual_knowledge_map(year2023_df[3])
indi_weekly_s5_2023 = weekly_individual_knowledge_map(year2023_df[4])
indi_weekly_s6_2023 = weekly_individual_knowledge_map(year2023_df[5])
indi_weekly_s7_2023 = weekly_individual_knowledge_map(year2023_df[6])
indi_weekly_s8_2023 = weekly_individual_knowledge_map(year2023_df[7])
indi_weekly_s9_2023 = weekly_individual_knowledge_map(year2023_df[8])
indi_weekly_s10_2023 = weekly_individual_knowledge_map(year2023_df[9])
indi_weekly_s11_2023 = weekly_individual_knowledge_map(year2023_df[10])
indi_weekly_s12_2023 = weekly_individual_knowledge_map(year2023_df[11])

#indi_weekly_s12_2022[0].show("social_network.html")

#indi_weekly_s12_2023[3].show("social_network.html")

for s in range(1, 13):
    for i, indi_weekly in enumerate(globals()[f"indi_weekly_s{s}_2023"]):
        indi_weekly.show(f"assets/2023_s{s}_weekly_{i+1}.html")
for s in range(1, 13):
    for i, indi_weekly in enumerate(globals()[f"indi_weekly_s{s}_2022"]):
        indi_weekly.show(f"assets/2022_s{s}_weekly_{i+1}.html")
for s in range(1, 8):
    for i, indi_weeklye in enumerate(globals()[f"indi_weekly_s{s}_2021"]):
        indi_weekly.show(f"assets/2021_s{s}_weekly_{i+1}.html")

